-----------
- Bug #1: -
-----------

Bug specified by peverify.exe and seems to occur in every class constructor.

[IL]: Error: [adaptivep_nu_instrumented.exe : Payroll.AppEntry::.ctor] [offset 0x00000014] [opcode call] Uninitialized item on stack.

Occured in this IL code:
  .maxstack  6
  .locals init (class [Nu.Runtime]Nu.Runtime.IJoinpoint V_0,
           object[] V_1)
  IL_0000:  ldc.i4     0x0
  IL_0005:  newarr     [mscorlib]System.Object
  IL_000a:  stloc.1
  IL_000b:  ldsfld     class [Nu.Runtime]Nu.Runtime.IStaticPart Payroll.AppEntry::thisJPSP2
  IL_0010:  ldarg.0
  IL_0011:  ldnull
  IL_0012:  ldnull
  IL_0013:  ldloc.1
  IL_0014:  call       class [Nu.Runtime]Nu.Runtime.IJoinpoint [Nu.Runtime]Nu.Runtime.Factory::MakeJP(class [Nu.Runtime]Nu.Runtime.IStaticPart, object, object, object, object[])



-----------
- Bug #2: -
-----------

Bug specified by peverify.exe and occurs in the adaptive and cf examples (but not every example):
[MD]: Error: TypeRef has a duplicate, token=0x01000012.  [token:0x01000002]
[MD]: Error: TypeRef has a duplicate, token=0x01000002.  [token:0x01000012]



-----------
- Bug #3: -
-----------

Bug specified by peverify.exe:
[IL]: Error: [adaptivep_nu_instrumented.exe : Payroll.Salary::.ctor] [offset 0x00000012] [opcode stelem.ref] [found Int32] [expected objref 'System.Object'] Unexpected type on the stack.

This seems to be caused by storing the arguments of the join point into an object array.  Storing types 'int' would require boxing, which we dont do at the moment.



-----------
- Bug #4: -
-----------

A join point is made at the beginning of a function.  This same join point is passed to both DispatchExecutionJP and DispatchReturnJP in the Dispatcher.
If someone makes a join point of And(Return(...), Execution(...)) then this join point will be (currently) checked at both execution and return and will
be true at both points, aka it will match twice when it should not match.

IE, the following pointcut matches twice:
	Dispatcher.Bind(
		new And(
			new Execution(new MethodPattern(Modifiers.Any, "foo")),
			new Return(new MethodPattern(Modifiers.Any, "foo"))),
		new SimpleDelegate(Del));

Seems to be due to the fact that we make one join point of type 'execution' and pass that to both dispatch methods.
The join point types dont currently support return.



---------
- Todos -
---------

TODO: Load the Target part of the join point (ExecutionJP.cs)
TODO: Load the Return part of the join point (ExecutionJP.cs)
TODO: box items in the args array of the join point (ExecutionJP.cs)
TODO: maybe make the args pointcut a little more user friendly
